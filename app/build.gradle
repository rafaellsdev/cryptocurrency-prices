apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'jacoco'

android {
    namespace "com.rafaellsdev.cryptocurrencyprices"
    compileSdk 34

    defaultConfig {
        applicationId "com.rafaellsdev.cryptocurrencyprices"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
    }

    testOptions {
        unitTests.all {
            jacoco {
                enabled = false
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    finalizedBy 'jacocoTestReport'
}

task jacocoTestReport(type: JacocoReport) {
    dependsOn 'testDebugUnitTest' // or 'test' for all unit tests

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$projectDir/src/main/java"
    def kotlinSrc = "$projectDir/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc, kotlinSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))

    // Ensure the report includes all relevant source sets
    additionalSourceDirs.setFrom(files([mainSrc, kotlinSrc]))
    additionalClassDirs.setFrom(files([debugTree]))

    // Ensure the report includes coverage for all relevant tasks
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: fileFilter)
        }))
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'com.google.android.material:material:1.6.0-alpha01'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.test.ext:junit-ktx:1.2.1'
    def lifecycle_version = "2.4.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "com.squareup.picasso:picasso:2.71828"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    implementation 'com.facebook.shimmer:shimmer:0.1.0'

    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.0"


    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.7.3'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.1"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.mockito:mockito-core:4.0.0"
    testImplementation "org.mockito:mockito-inline:4.0.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}